'''
Кейс-задача № 2

Стилистическое преобразование чисел:
Напишите программу, которая запрашивает у пользователя последовательно день его рождения, месяц и год;
Напишите функцию, которая определяет какому дню недели соответствует эта дата?
Напишите функцию, которая определяет - високосный это был год, или нет?
Напишите функцию, которая определяет сколько сейчас лет пользователю;
Реализуйте вывод в консоль даты рождения пользователя в формате дд мм гггг, где цифры прорисованы звёздочками (*), как на электронном табло.
'''

from datetime import datetime

# Шаблоны для отображения цифр в стиле электронного табло (5 строк высотой)
DIGITS = {
    '0': [
        " *** ",
        "*   *",
        "*   *",
        "*   *",
        " *** "
    ],
    '1': [
        "  *  ",
        " **  ",
        "  *  ",
        "  *  ",
        " *** "
    ],
    '2': [
        " *** ",
        "    *",
        " *** ",
        "*    ",
        " *** "
    ],
    '3': [
        " *** ",
        "    *",
        " *** ",
        "    *",
        " *** "
    ],
    '4': [
        "*   *",
        "*   *",
        " ****",
        "    *",
        "    *"
    ],
    '5': [
        " ****",
        "*    ",
        " *** ",
        "    *",
        " *** "
    ],
    '6': [
        " *** ",
        "*    ",
        "**** ",
        "*   *",
        " *** "
    ],
    '7': [
        " ****",
        "    *",
        "   * ",
        "  *  ",
        " *   "
    ],
    '8': [
        " *** ",
        "*   *",
        " *** ",
        "*   *",
        " *** "
    ],
    '9': [
        " *** ",
        "*   *",
        " ****",
        "    *",
        " *** "
    ],
    ' ': [
        "     ",
        "     ",
        "     ",
        "     ",
        "     "
    ]
}

def get_weekday(day, month, year):
    ''' Функция: определение дня недели'''
    try:
        date = datetime(year, month, day)
        weekdays = ["понедельник", "вторник", "среда", "четверг", "пятница", "суббота", "воскресенье"]
        return weekdays[date.weekday()]
    except ValueError:
        return "некорректная дата"

def is_leap_year(year):
    ''' Функция: високосный ли год '''
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

def calculate_age(day, month, year):
    ''' Функция: вычисление возраста '''
    today = datetime.today()
    age = today.year - year
    # Проверяем, был ли день рождения в этом году
    if (today.month, today.day) < (month, day):
        age -= 1
    return age

def display_date_as_stars(day, month, year):
    ''' Функция: вывод даты в стиле электронного табло '''
    # Форматируем дату как строку: ДД ММ ГГГГ
    date_str = f"{day:02d} {month:02d} {year:04d}"

    # Создаём 5 строк для вывода
    lines = ["", "", "", "", ""]

    for char in date_str:
        digit_pattern = DIGITS.get(char, DIGITS[' '])
        for i in range(5):
            lines[i] += digit_pattern[i] + "  "  # Пробел между символами

    print("\nВаша дата рождения в стиле электронного табло:\n")
    for line in lines:
        print(line)

# Основная программа
def main():
    print("Введите данные о дне рождения:")

    try:
        day = int(input("День: "))
        month = int(input("Месяц: "))
        year = int(input("Год: "))

        # Проверка диапазонов
        if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2024):
            print("Ошибка: некорректные данные.")
            return

        # Вычисления
        weekday = get_weekday(day, month, year)
        leap = is_leap_year(year)
        age = calculate_age(day, month, year)

        # Вывод информации
        print("\n" + "="*40)
        print(f"Дата рождения: {day:02d}.{month:02d}.{year}")
        print(f"День недели: {weekday}")
        print(f"Високосный год: {'Да' if leap else 'Нет'}")
        print(f"Возраст: {age} лет")
        print("="*40)

        # Вывод даты звёздочками
        display_date_as_stars(day, month, year)

    except ValueError:
        print("Ошибка: введите целые числа.")
    except Exception as e:
        print(f"Произошла ошибка: {e}")

# Запуск
if __name__ == "__main__":
    main()